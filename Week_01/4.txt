
4（可选）、检查一下自己维护的业务系统的 JVM 参数配置，用 jstat 和 jstack、jmap 查看一下详情，并且自己独立分析一下大概情况，思考有没有不合理的地方，如何改进。

dev 开发环境

root@motor-transaction-java ~]# jinfo -flags 10948
Attaching to process ID 10948, please wait...
Debugger attached successfully.
Server compiler detected.
JVM version is 25.65-b01
Non-default VM flags: -XX:CICompilerCount=2 -XX:InitialHeapSize=62914560 -XX:MaxHeapSize=994050048 -XX:MaxNewSize=331350016 -XX:MinHeapDeltaBytes=524288 -XX:NewSize=20971520 -XX:OldSize=41943040 -XX:+UseCompressedClassPointers -XX:+UseCompressedOops -XX:+UseParallelGC

test 测试环境

[root@motor-log-java ~]# jinfo -flags 22166
Attaching to process ID 22166, please wait...
Debugger attached successfully.
Server compiler detected.
JVM version is 25.65-b01
Non-default VM flags: -XX:CICompilerCount=2 -XX:InitialHeapSize=62914560 -XX:MaxHeapSize=994050048 -XX:MaxNewSize=331350016 -XX:MinHeapDeltaBytes=524288 -XX:NewSize=20971520 -XX:OldSize=41943040 -XX:+UseCompressedClassPointers -XX:+UseCompressedOops -XX:+UseParallelGC

-XX:CICompilerCount=2 最大并行编译数

-XX:InitialHeapSize 初始堆大小 63M

-XX:MaxHeapSize=最大堆大小 994M
-XX:MaxNewSize=最大新生代 331M

-XX:NewSize=年轻代大小 21M

-XX:OldSize=老年代42M

-XX:+UseCompressedClassPointers 是否启用压缩类指针

-XX:CompressedClassSpaceSize 这个选项打开后，class信息中的指针也用32bit的Compressed版本。而这些指针指向的空间被称作“Compressed Class Space”。默认大小是1G，但可以通过“CompressedClassSpaceSize”调整。如果你的java程序引用了太多的包，有可能会造成这个空间不够用，于是会看到java.lang.OutOfMemoryError: Compressed class space这时，一般调大CompreseedClassSpaceSize就可以了



-XX:+UseCompressedOops :

当你将你的应用从 32 位的 JVM 迁移到 64 位的 JVM 时，由于对象的指针从

32 位增加到了 64 位，因此堆内存会突然增加，差不多要翻倍。这也会对 CPU

缓存（容量比内存小很多）的数据产生不利的影响。因为，迁移到 64 位的 JVM

主要动机在于可以指定最大堆大小，通过压缩 OOP 可以节省一定的内存。通过

-XX:+UseCompressedOops 选项，JVM 会使用 32 位的 OOP，而不是 64 位

的 OOP。

 -XX:+UseParallelGC 使用并行收集器